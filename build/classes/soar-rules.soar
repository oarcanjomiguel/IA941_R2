# RA 210433
################################  CONFIGURATION ################################
watch 5
learn --off
epmem --set learning off 

###################################  WANDER  ###################################
# This operator will make the agent to walk ahead at the enviroment
# Propose*wander:
sp {propose*wander
   (state <s> ^attribute state
              ^impasse no-change                           
              ^superstate <ss>)
   (<ss> ^io.input-link <il>)
   (<ss> ^superstate nil)
   (<il> ^CREATURE <creature>)
   (<creature> ^SENSOR.VISUAL <visual>)
-->
   (<ss> ^operator <o> +)
   (<o> ^name wander)}
   
# Apply*wander:
# If the wander operator is selected, then generate an output command to it 
sp {apply*wander
   (state <s> ^operator <o>
              ^io <io>)
   (<io> ^output-link <ol>)
   (<o> ^name wander)
-->
   (<ol> ^MOVE <command>)
   (<command> ^Vel 0)
   (<command> ^VelR 2)
   (<command> ^VelL 0)}
    
# If the wander operator is selected,
# and there is a completed move command on the output link,
# then remove that command.   
sp {apply*wander*remove*move
(state <s> ^operator.name wander
           ^io.output-link <out>)
(<out> ^{<cmd> << EAT GET MOVE DELIVER >>} <move>)
(<move> ^status complete)
-->
(<out> ^<cmd> <move> -)}   

################ SEE ENTITY WITH MEMORY COUNT #####################
# This operator will make the agent hold some entities in memory if the agent already has some entities in memory

# Propose*see*entity*with*memory*count:
sp {propose*see*entity*with*memory*count
   (state <s> ^io.input-link <il>)
   (<il> ^CREATURE <creature>)
   (<creature> ^SENSOR.VISUAL.ENTITY <entity>)     
   (<entity> ^TYPE <type> << JEWEL FOOD >>)   
   (<entity> ^COLOR <color>)
   (<entity> ^X <x>)
   (<entity> ^Y <y>) 
   (<entity> ^NAME <name>)
   (<creature> ^MEMORY <memory>)   
  -(<memory> ^ENTITY.NAME <name>)
#   (<memory> ^COUNT <quantity> < 7)
   (<memory> ^COUNT <quantity>)
-->
   (<s> ^operator <o> +)
   (<o> ^name seeEntityWithMemoryCount)
   (<o> ^parameterEntity <newEntity>)
   (<newEntity> ^Name <name>)
   (<newEntity> ^Type <type>)
   (<newEntity> ^X <x>)
   (<newEntity> ^Y <y>)
   (<newEntity> ^Color <color>)
   (write (crlf) | Proposing to store entity | <name> | | <color> |. Counter: | <quantity>)
}
   
# Apply*see*entity*with*memory*count:
# If the see operator is selected, then generate an output command to it 
sp {apply*see*entity*with*memory*count
   (state <s> ^operator <o>
              ^io <io>)
   (<io> ^input-link <il>)
   (<io> ^output-link <ol>)
   (<il> ^CREATURE <creature>)
   (<creature> ^MEMORY <memory>)
   (<memory> ^COUNT <quantity>)   
   (<o> ^name seeEntityWithMemoryCount)
   (<o> ^parameterEntity <newEntity>)
   (<newEntity> ^X <x>)
   (<newEntity> ^Y <y>)
   (<newEntity> ^Name <name>)
   (<newEntity> ^Type <type>)
   (<newEntity> ^Color <color>)
-->
   (<memory> ^ENTITY <memoryEntity>)
   (<memoryEntity> ^X <x>)
   (<memoryEntity> ^Y <y>)
   (<memoryEntity> ^NAME <name>)
   (<memoryEntity> ^TYPE <type>)
   (<memoryEntity> ^COLOR <color>) 
   (<memory> ^COUNT <quantity> -)
   (<memory> ^COUNT (+ 1 <quantity>))
   (write (crlf) | APPLYING store entity | <name> | | <color> |. Counter: | (+ 1 <quantity>))
}  

################  SEE ENTITY WITHOUT MEMORY COUNT #################
# This operator will make the agent hold some entities in memory if the agent has not some entities in memory

# Propose*see*entity*without*memory*count:
sp {propose*see*entity*without*memory*count
   (state <s> ^io.input-link <il>)
   (<il> ^CREATURE <creature>)
   (<creature> ^SENSOR.VISUAL.ENTITY <entity>)
   (<entity> ^TYPE <type> << JEWEL FOOD >>)
   (<entity> ^X <x>)
   (<entity> ^Y <y>) 
   (<entity> ^NAME <name>)
   (<entity> ^COLOR <color>)
   (<creature> ^MEMORY <memory>)   
   -(<memory> ^ENTITY.NAME <name>)
   -(<memory> ^COUNT <quantity>)
-->
   (<s> ^operator <o> +)
   (<o> ^name seeEntityWithoutMemoryCount)
   (<o> ^parameterEntity <newEntity>)
   (<newEntity> ^Name <name>)
   (<newEntity> ^Type <type>)
   (<newEntity> ^X <x>)
   (<newEntity> ^Y <y>)
   (<newEntity> ^Color <color>)
   (write (crlf) | Proposing to store entity | <name> | | <color> |. No counter.|)
}

# Apply*see*entity*without*memory*count:
# If the see operator is selected, then generate an output command to it 
sp {apply*see*entity*without*memory*count
   (state <s> ^operator <o>
              ^io <io>)
   (<io> ^input-link <il>)
   (<io> ^output-link <ol>)
   (<il> ^CREATURE <creature>)
   (<creature> ^MEMORY <memory>)  
   (<o> ^name seeEntityWithoutMemoryCount)
   (<o> ^parameterEntity <newEntity>)
   (<newEntity> ^X <x>)
   (<newEntity> ^Y <y>)
   (<newEntity> ^Name <name>)
   (<newEntity> ^Type <type>)
   (<newEntity> ^Color <color>)
-->
   (<memory> ^ENTITY <memoryEntity>)
   (<memoryEntity> ^X <x>)
   (<memoryEntity> ^Y <y>)
   (<memoryEntity> ^NAME <name>)
   (<memoryEntity> ^TYPE <type>)
   (<memoryEntity> ^COLOR <color>)
   (<memory> ^COUNT 1)
   (write (crlf) | APPLYING store entity | <name> | | <color> |. Counter: 1|)
}

#
# Jewel colors counters
#

sp {apply*see*entity*with-without*memory*count*update-jewel-counters*new-1
   (state <s> ^operator <o>
              ^io <io>)
   (<io> ^input-link <il>)
   (<io> ^output-link <ol>)
   (<il> ^CREATURE <creature>)
   (<creature> ^MEMORY <memory>)  
   (<o> ^name << seeEntityWithMemoryCount seeEntityWithoutMemoryCount >>)
   (<o> ^parameterEntity <newEntity>)
   (<newEntity> ^X <x>)
   (<newEntity> ^Y <y>)
   (<newEntity> ^Name <name>)
   (<newEntity> ^Type JEWEL)
   (<newEntity> ^Color <color>)
  -(<memory> ^jewels-counters)
-->
   (<memory> ^jewels-counters.<color> 1)
   (write (crlf) | Creating | <color> | jewels counter. First counter.|)
}


sp {apply*see*entity*with-without*memory*count*update-jewel-counters*new-2
   (state <s> ^operator <o>
              ^io <io>)
   (<io> ^input-link <il>)
   (<io> ^output-link <ol>)
   (<il> ^CREATURE <creature>)
   (<creature> ^MEMORY <memory>)  
   (<o> ^name << seeEntityWithMemoryCount seeEntityWithoutMemoryCount >>)
   (<o> ^parameterEntity <newEntity>)
   (<newEntity> ^X <x>)
   (<newEntity> ^Y <y>)
   (<newEntity> ^Name <name>)
   (<newEntity> ^Type JEWEL)
   (<newEntity> ^Color <color>)
   (<memory> ^jewels-counters <jc>)
  -(<jc> ^<color>)
-->
   (<jc> ^<color> 1)
   (write (crlf) | Creating | <color> | jewels counter. |)
}


sp {apply*see*entity*with-without*memory*count*update-jewel-counters*add
   (state <s> ^operator <o>
              ^io <io>)
   (<io> ^input-link <il>)
   (<io> ^output-link <ol>)
   (<il> ^CREATURE <creature>)
   (<creature> ^MEMORY <memory>)  
   (<o> ^name << seeEntityWithMemoryCount seeEntityWithoutMemoryCount >>)
   (<o> ^parameterEntity <newEntity>)
   (<newEntity> ^X <x>)
   (<newEntity> ^Y <y>)
   (<newEntity> ^Name <name>)
   (<newEntity> ^Type JEWEL)
   (<newEntity> ^Color <color>)
   (<memory> ^jewels-counters <jc>)
   (<jc> ^<color> <old-value>)
-->
   (<jc> ^<color> <old-value> -
                  (+ <old-value> 1))
   (write (crlf) | Increasing | <color> | jewels counter. Value: | (+ <old-value> 1))
}

##############################  MOVE FOOD  #####################################
# This operator will make the agent go straight to the food

# Propose*move*food:
sp {propose*move*food
   (state <s> ^io.input-link <il>)
   (<il> ^CREATURE <creature>)
   (<creature> ^MEMORY <memory>)
   (<memory> ^ENTITY <entityInMemory>)
   (<creature> ^POSITION <creaturePosition>)
   (<creaturePosition> ^X <creaturePositionX>)
   (<creaturePosition> ^Y <creaturePositionY>)
   (<entityInMemory> ^TYPE FOOD)
   (<entityInMemory> ^X <entityInMemoryPositionX>)
   (<entityInMemory> ^Y <entityInMemoryPositionY>)
   (<entityInMemory> ^NAME <entityInMemoryName>) 
   (<creature> ^PARAMETERS.MINFUEL <minFuel>) 
-->
   (<s> ^operator <o> +)
   (<o> ^name moveFood)
   (<o> ^parameter <food>)
   (<food> ^distance (sqrt (+ (* (- <creaturePositionX> <entityInMemoryPositionX>) (- <creaturePositionX> <entityInMemoryPositionX>)) (* (- <creaturePositionY> <entityInMemoryPositionY>) (- <creaturePositionY> <entityInMemoryPositionY>)))))
   (<food> ^X <entityInMemoryPositionX>)
   (<food> ^Y <entityInMemoryPositionY>)
   (<food> ^NAME <entityInMemoryName>)
   (<o> ^parameterFuel <minFuel>)}
   
# Apply*move*food:
# If the move operator is selected, then generate an output command to it 
sp {apply*move*food
   (state <s> ^operator <o>
              ^io <io>)
   (<io> ^input-link <il>)             
   (<io> ^output-link <ol>)
   (<o> ^name moveFood)
   (<o> ^parameter <food>)
   (<food> ^X <x>)
   (<food> ^Y <y>)
   (<food> ^NAME <entityInMemoryName>)
   (<il> ^CREATURE <creature>)
   (<creature> ^MEMORY <memory>)
   (<memory> ^ENTITY <entityInMemory>)
   (<entityInMemory> ^NAME <entityInMemoryName>)
-->
   (<ol> ^MOVE <command>)
   (<command> ^Vel 1)
   (<command> ^VelR 1)
   (<command> ^VelL 1)
   (<command> ^X <x>)
   (<command> ^Y <y>)}
  
# Apply*moveFood*remove-move:
# If the moveFood operator is selected,
# and there is a completed move command on the output link,
# then remove that command.   
sp {apply*moveFood*remove-move
(state <s> ^operator.name moveFood
           ^io.output-link <out>)
(<out> ^{<cmd> << EAT GET MOVE DELIVER >>} <move>)
(<move> ^status complete)
-->
(<out> ^<cmd> <move> -)}   

#Remove the food from memory because it is not there anymore 
sp {apply*moveFood*remove*food
(state <s> ^operator <o>
           ^io.input-link <il>)
(<o> ^name moveFood)
(<o> ^parameter <food>)
(<food> ^X <x>)
(<food> ^Y <y>)
(<il> ^CREATURE <creature>)
(<creature> ^MEMORY <memory>)
(<memory> ^ENTITY <entityInMemory>) 
(<memory> ^COUNT <quantity>)
(<entityInMemory> ^X <x>)
(<entityInMemory> ^Y <y>)      
-(<creature> ^SENSOR.VISUAL.ENTITY.X <entityX> <x>)
-(<creature> ^SENSOR.VISUAL.ENTITY.Y <entityY> <y>)
-->
(<memory> ^ENTITY <entityInMemory> -)
(<memory> ^COUNT <quantity> -
          ^COUNT (- <quantity> 1))}   

###############################  EAT FOOD  #####################################
# This operator will make the agent eat the food

# Propose*eat*food:
sp {propose*eat*food
   (state <s> ^io.input-link <il>)
   (<il> ^CREATURE <creature>)
   (<creature> ^SENSOR.VISUAL.ENTITY <entity>)
   (<entity> ^TYPE FOOD) 
   (<entity> ^DISTANCE <foodDistance> < 30)
   (<entity> ^NAME <foodName>)
   (<creature> ^MEMORY.ENTITY.NAME <memoryItemName> <foodName>)     
-->
   (<s> ^operator <o> +)
   (<o> ^name eatFood)
   (<o> ^parameter <food>)
   (<food> ^NAME <foodName>)
   (<food> ^DISTANCE <foodDistance>)}
   
# Apply*eat*food:
# If the move operator is selected, then generate an output command to it 
sp {apply*eat*food
   (state <s> ^operator <o>
              ^io <io>)
   (<io> ^input-link <il>)      
   (<io> ^output-link <ol>)
   (<o> ^name eatFood)
   (<o> ^parameter.NAME <foodName>)
   (<il> ^CREATURE <creature>) 
   (<creature> ^MEMORY <memory>)
   (<memory> ^COUNT <quantity>)  
   (<memory> ^ENTITY <memoryEntity>)
   (<memoryEntity> ^NAME <memoryEntityName> <foodName>)
-->
   (<ol> ^EAT <command>)
   (<command> ^Name <foodName>)
   (<memory> ^COUNT <quantity> -
             ^COUNT (- <quantity> 1))
   (<memory> ^ENTITY <memoryEntity> -)}
  
# Apply*eat*remove-move:
# If the eatFood operator is selected,
# and there is a completed move command on the output link,
# then remove that command.   
sp {apply*eatFood*remove-eat
(state <s> ^operator <o>            
           ^io.output-link <out>)
(<o> ^name eatFood)
(<o> ^parameter.name <foodName>)
(<out> ^{<cmd> << EAT GET MOVE DELIVER >>} <eat>)
(<eat> ^status complete)
-->
(<out> ^<cmd> <eat> -)}

#############################  MOVE JEWEL  #####################################
# This operator will make the agent go straight to the jewel

# Propose*move*jewel:
sp {propose*move*jewel
   (state <s> ^io.input-link <il>)
   (<il> ^CREATURE <creature>)
   (<creature> ^MEMORY <memory>)
   (<memory> ^ENTITY <entityInMemory>)
   (<creature> ^POSITION <creaturePosition>)
   (<creaturePosition> ^X <creaturePositionX>)
   (<creaturePosition> ^Y <creaturePositionY>)
   (<entityInMemory> ^TYPE JEWEL)
   (<entityInMemory> ^X <entityInMemoryPositionX>)
   (<entityInMemory> ^Y <entityInMemoryPositionY>)
   (<entityInMemory> ^NAME <entityInMemoryName>)
   (<entityInMemory> ^COLOR <entityInMemoryColor>)       
-->
   (<s> ^operator <o> +)
   (<o> ^name moveJewel)
   (<o> ^parameter <jewel>)
   (<jewel> ^distance (sqrt (+ (* (- <creaturePositionX> <entityInMemoryPositionX>) (- <creaturePositionX> <entityInMemoryPositionX>)) (* (- <creaturePositionY> <entityInMemoryPositionY>) (- <creaturePositionY> <entityInMemoryPositionY>)))))
   (<jewel> ^X <entityInMemoryPositionX>)
   (<jewel> ^Y <entityInMemoryPositionY>)
   (<jewel> ^NAME <entityInMemoryName>)
   (<jewel> ^COLOR <entityInMemoryColor>)}
   
# Apply*move*jewel:
# If the move operator is selected, then generate an output command to it 
sp {apply*move*jewel
   (state <s> ^operator <o>
              ^io <io>)
   (<io> ^input-link <il>)           
   (<io> ^output-link <ol>)
   (<o> ^name moveJewel)
   (<o> ^parameter <jewel>)
   (<jewel> ^X <x>)
   (<jewel> ^Y <y>)
   (<jewel> ^NAME <entityInMemoryName>)
   (<il> ^CREATURE <creature>)
   (<creature> ^MEMORY <memory>)
   (<memory> ^ENTITY <entityInMemory>)
   (<entityInMemory> ^NAME <entityInMemoryName>)
-->
   (<ol> ^MOVE <command>)
   (<command> ^Vel 1)
   (<command> ^VelR 1)
   (<command> ^VelL 1)
   (<command> ^X <x>)
   (<command> ^Y <y>)}
  
# Apply*moveJewel*remove-move:
# If the moveJewel operator is selected,
# and there is a completed move command on the output link,
# then remove that command.   
sp {apply*moveJewel*remove-move
(state <s> ^operator.name moveJewel
           ^io.output-link <out>)
(<out> ^MOVE <move>)
(<move> ^status complete)
-->
(<out> ^MOVE <move> -)}   

#Remove the jewel From memory because de jewel is not there 
#sp {apply*moveJewel*remove*jewel
#(state <s> ^operator <o>
#           ^io.input-link <il>)
#(<o> ^name moveJewel)
#(<o> ^parameter <jewel>)
#(<jewel> ^X <x>)
#(<jewel> ^Y <y>)
#(<il> ^CREATURE <creature>)
#(<creature> ^MEMORY <memory>)
#(<memory> ^ENTITY <entityInMemory>) 
#(<memory> ^COUNT <quantity>)
#(<entityInMemory> ^X <x>)
#(<entityInMemory> ^Y <y>)      
#-(<creature> ^SENSOR.VISUAL.ENTITY.X <entityX> <x>)
#-(<creature> ^SENSOR.VISUAL.ENTITY.Y <entityY> <y>)
#-->
#(<memory> ^ENTITY <entityInMemory> -)
#(<memory> ^COUNT <quantity> -
#          ^COUNT (- <quantity> 1))}   

##############################  GET JEWEL  #####################################
# This operator will make the agent get the jewel

# Propose*get*jewel:
sp {propose*get*jewel
   (state <s> ^io.input-link <il>)
   (<il> ^CREATURE <creature>)
   (<creature> ^SENSOR.VISUAL.ENTITY <entity>)
   (<entity> ^TYPE JEWEL) 
   (<entity> ^DISTANCE <jewelDistance> < 30)
   (<entity> ^NAME <jewelName>)
   (<creature> ^MEMORY.ENTITY.NAME <memoryItemName> <jewelName>)     
-->
   (<s> ^operator <o> +)
   (<o> ^name getJewel)
   (<o> ^parameter <jewel>)
   (<jewel> ^NAME <jewelName>)
   (<jewel> ^DISTANCE <jewelDistance>)}
   
# Apply*get*jewel:
# If the move operator is selected, then generate an output command to it 
sp {apply*get*jewel
   (state <s> ^operator <o>
              ^io <io>)
   (<io> ^input-link <il>)      
   (<io> ^output-link <ol>)
   (<o> ^name getJewel)
   (<o> ^parameter.NAME <jewelName>)
   (<il> ^CREATURE <creature>) 
   (<creature> ^MEMORY <memory>)
   (<memory> ^COUNT <quantity>)  
   (<memory> ^ENTITY <memoryEntity>)
   (<memoryEntity> ^NAME <memoryEntityName> <jewelName>)
-->
   (<ol> ^GET <command>)
   (<command> ^Name <jewelName>)
   (<memory> ^COUNT <quantity> -
             ^COUNT (- <quantity> 1))
   (<memory> ^ENTITY <memoryEntity> -)}
  
# Apply*get*remove-move:
# If the getJewel operator is selected,
# and there is a completed move command on the output link,
# then remove that command.   
sp {apply*getJewel*remove-get
(state <s> ^operator <o>            
           ^io.output-link <out>)
(<o> ^name getJewel)
(<o> ^parameter.name <jewelName>)
(<out> ^{<cmd> << GET MOVE DELIVER >>} <move>)
(<move> ^status complete)
-->
(<out> ^<cmd> <move> -)}   


#
# Decrease the environment counter of total jewels of a given color
#

sp {apply*get*jewel*decrease-jewel-counter
   (state <s> ^operator <o>
              ^io <io>)
   (<io> ^input-link <il>)      
   (<o> ^name getJewel)
   (<o> ^parameter.NAME <jewelName>)
   (<il> ^CREATURE <creature>) 
   (<creature> ^MEMORY <memory>)
   (<memory> ^jewels-counters <jc>)
   (<jc> ^<jewelColor> <jewel-color-quantity>)
   (<memory> ^ENTITY <memoryEntity>)
   (<memoryEntity> ^NAME <jewelName>
                   ^COLOR <jewelColor>)
-->
   (<jc> ^<jewelColor> <jewel-color-quantity> -
                       (- <jewel-color-quantity> 1))
   (write (crlf) | Decreasing | <jewelColor> | jewels counter. Value: | (- <jewel-color-quantity> 1))
}            


#
# Increment the jewels-sack counter for the given color 
#

sp {apply*get*jewel*increase-jewels-sack-new-1
   (state <s> ^operator <o>
              ^io <io>)
   (<io> ^input-link <il>)      
   (<o> ^name getJewel)
   (<o> ^parameter.NAME <jewelName>)
   (<il> ^CREATURE <creature>) 
   (<creature> ^MEMORY <memory>)
  -(<memory> ^jewels-sack)
   (<memory> ^ENTITY <memoryEntity>)
   (<memoryEntity> ^NAME <jewelName>
                   ^COLOR <jewelColor>)
-->
   (<memory> ^jewels-sack.<jewelColor> 1)
   (write (crlf) | Put the first | <jewelColor> | jewel in the sack. First of all.|)
}


sp {apply*get*jewel*increase-jewels-sack-new-2
   (state <s> ^operator <o>
              ^io <io>)
   (<io> ^input-link <il>)      
   (<o> ^name getJewel)
   (<o> ^parameter.NAME <jewelName>)
   (<il> ^CREATURE <creature>) 
   (<creature> ^MEMORY <memory>)
   (<memory> ^jewels-sack <js>)
  -(<js> ^<jewelColor>)
   (<memory> ^ENTITY <memoryEntity>)
   (<memoryEntity> ^NAME <jewelName>
                   ^COLOR <jewelColor>)
-->
   (<js> ^<jewelColor> 1)
   (write (crlf) | Put the first | <jewelColor> | jewel in the sack.|)
}


sp {apply*get*jewel*increase-jewels-sack-new-add
   (state <s> ^operator <o>
              ^io <io>)
   (<io> ^input-link <il>)      
   (<o> ^name getJewel)
   (<o> ^parameter.NAME <jewelName>)
   (<il> ^CREATURE <creature>) 
   (<creature> ^MEMORY <memory>)
   (<memory> ^jewels-sack <js>)
   (<js> ^<jewelColor> <quantity>)
   (<memory> ^ENTITY <memoryEntity>)
   (<memoryEntity> ^NAME <jewelName>
                   ^COLOR <jewelColor>)
-->
   (<js> ^<jewelColor> <quantity> -
                       (+ <quantity> 1))
   (write (crlf) | Put another | <jewelColor> | jewel in the sack. Color total: | (+ <quantity> 1))
}



#####################################################################################
#
# Deliver completed leaflet
#
#####################################################################################

#
# Elaborate the current leaflets with the counter of already get jewels
#

sp {propose*update-leaflets-with-jewels-in-sack
   (state <s> ^io.input-link.CREATURE.LEAFLETS <lls>)
  -(<lls> ^leaflets-done *yes*)
-->
   (<s> ^operator <o> +, >)
   (<o> ^name updateLeaflets)
   (write (crlf) | Proposing to update the leaflets list |)
}


#sp {apply*update-leaflets-enough-jewels-in-sack
#   (state <s> ^operator.name updateLeaflets
#              ^io.input-link.CREATURE <creature>)
#   (<creature> ^MEMORY.jewels-sack <js>
#               ^LEAFLETS <lls>)
#   (<lls> ^LEAFLET <ll>)
#   (<ll> ^<color> <ll-color>)
#   (<js> ^<color> <color-count-sack> > 0)
#-->
#   (<ll-color> ^in-sack <color-count-sack>)
#   (<lls> ^leaflets-done *yes*)
#}


sp {apply*update-leaflets-enough-jewels-in-sack
   (state <s> ^operator.name updateLeaflets
              ^io.input-link.CREATURE <creature>)
   (<creature> ^MEMORY.jewels-sack <js>
               ^LEAFLETS <lls>)
   (<lls> ^LEAFLET <ll>)
   (<ll> ^{<color> << Blue Green Magenta Yellow Red White >>} <ll-color>)
   (<ll-color> ^TARGET <color-target-num>)
   (<js> ^<color> <color-count-sack> >= <color-target-num>)
-->
   (<ll-color> ^in-sack <color-count-sack>)
   (<lls> ^leaflets-done *yes*)
}


sp {apply*update-leaflets-less-jewels-in-sack
   (state <s> ^operator.name updateLeaflets
              ^io.input-link.CREATURE <creature>)
   (<creature> ^MEMORY.jewels-sack <js>
               ^LEAFLETS <lls>)
   (<lls> ^LEAFLET <ll>)
   (<ll> ^{<color> << Blue Green Magenta Yellow Red White >>} <ll-color>)
   (<ll-color> ^TARGET <color-target-num>)
   (<js> ^<color> <color-count-sack> < <color-target-num>)
-->
   (<ll> ^incomplete *yes*)
   (<ll-color> ^in-sack <color-count-sack>)
   (<lls> ^leaflets-done *yes*)
}




sp {apply*update-leaflets-no-jewels-in-sack
   (state <s> ^operator.name updateLeaflets
              ^io.input-link.CREATURE <creature>)
   (<creature> ^LEAFLETS <lls>)
   (<lls> ^LEAFLET <ll>)
   (<ll> ^{<color> << Blue Green Magenta Yellow Red White >>} <ll-color>)
 -{(<creature> ^MEMORY.jewels-sack <js>)
   (<js> ^<color> <color-count-sack> > 0)}
-->
   (<ll> ^incomplete *yes*)
   (<ll-color> ^in-sack 0)
   (<lls> ^leaflets-done *yes*)
}




sp {elaborate*deliverySpot*distance
   (state <s> ^io.input-link.CREATURE <creature>)
   (<creature> ^DELIVERY-SPOT <ds>
               ^LEAFLETS <lls>
               ^POSITION <creaturePosition>)
   (<creaturePosition> ^X <c-x>
                       ^Y <c-y>)
   (<ds> ^X <ds-x>
         ^Y <ds-y>)
-->
  (<ds> ^distance (sqrt (+ (* (- <c-x> <ds-x>) (- <c-x> <ds-x>)) (* (- <c-y> <ds-y>) (- <c-y> <ds-y>)))))
}



sp {monitor*deliverySpot*distance
   (state <s> ^io.input-link.CREATURE <creature>)
   (<creature> ^DELIVERY-SPOT.distance <ds-distance>)
-->
   (write (crlf) | Current distance to delivery spot | <ds-distance>)
}   




sp {propose*moveDeliverySpot*complete-leaflet
   (state <s> ^io.input-link.CREATURE <creature>)
   (<creature> ^DELIVERY-SPOT <ds>
               ^LEAFLETS <lls>
               ^POSITION <creaturePosition>)
   (<creaturePosition> ^X <c-x>
                       ^Y <c-y>)
   (<ds> ^X <ds-x>
         ^Y <ds-y>
         ^distance <ds-distance> > 30)
   (<lls> ^LEAFLET <ll>
          ^leaflets-done *yes*)
   (<ll> ^PAYMENT <ll-payment>
         ^ID <ll-id>
        -^incomplete *yes*)
-->
   (<s> ^operator <o> +)
   (<o> ^name moveDeliverySpot
        ^distance <ds-distance>
        ^id <ll-id>
        ^payment <ll-payment>)
   (write (crlf) | Proposing go to delivery spot for leaflet | <ll-id> | of payment | <ll-payment> | and distance | <ds-distance>)
}




sp {apply*moveDeliverySpot*complete-leaflet
   (state <s> ^operator <o>
              ^io <io>)
   (<io> ^input-link.CREATURE <creature>)           
   (<io> ^output-link <ol>)
   (<o> ^name moveDeliverySpot
        ^id <ll-id>
        ^payment <ll-payment>)
   (<creature> ^DELIVERY-SPOT <ds>)
   (<ds> ^X <ds-x>
         ^Y <ds-y>)
-->
   (<ol> ^MOVE <command>)
   (<command> ^Vel 1)
   (<command> ^VelR 1)
   (<command> ^VelL 1)
   (<command> ^X <ds-x>)
   (<command> ^Y <ds-y>)
   (write (crlf) | Going to delivery spot to deliver leaflet | <ll-id> | of payment | <ll-payment>)
}




sp {propose*deliverLeaflet
   (state <s> ^io.input-link.CREATURE <creature>)
   (<creature> ^DELIVERY-SPOT <ds>
               ^LEAFLETS <lls>
               ^POSITION <creaturePosition>)
   (<creaturePosition> ^X <c-x>
                       ^Y <c-y>)
   (<ds> ^X <ds-x>
         ^Y <ds-y>
         ^distance <ds-distance> <= 30)
   (<lls> ^LEAFLET <ll>
          ^leaflets-done *yes*)
   (<ll> ^PAYMENT <ll-payment>
         ^ID <ll-id>
        -^incomplete *yes*)
-->
   (<s> ^operator <o> +, >)
   (<o> ^name deliverLeaflet
        ^id <ll-id>
        ^payment <ll-payment>)
   (write (crlf) | Proposing to deliver leaflet | <ll-id> | of payment | <ll-payment>)
}



sp {apply*deliverLeaflet
   (state <s> ^operator <o>
              ^io <io>)
   (<io> ^output-link <ol>)
   (<o> ^name deliverLeaflet
        ^id <ll-id>
        ^payment <ll-payment>)
-->
   (<ol> ^DELIVER <command>)
   (<command> ^id <ll-id>)
   (write (crlf) | Deliver leaflet | <ll-id> | of payment | <ll-payment>)
}




sp {apply*deliverLeaflet*decrease-jewels-sack
   (state <s> ^operator <o>
              ^io <io>)
   (<io> ^input-link.CREATURE <creature>)           
   (<io> ^output-link <ol>)
   (<o> ^name deliverLeaflet
        ^id <ll-id>)
   (<creature> ^LEAFLETS <lls>)
   (<lls> ^LEAFLET <ll>)
   (<ll> ^ID <ll-id>
         ^{<color> << Blue Green Magenta Yellow Red White >>} <ll-color>)
   (<ll-color> ^TARGET <ll-color-count>
              -^already-decreased-from-sack *yes*)
   (<creature> ^MEMORY.jewels-sack <js>)
   (<js> ^<color> <js-color-count>)
-->
   (<js> ^<color> <js-color-count> -
                  (- <js-color-count> <ll-color-count>))
   (<ll-color> ^already-decreased-from-sack *yes*)
   (write (crlf) | Leaflet | <ll-id> | delivered. Now has  | (- <js-color-count> <ll-color-count>) | | <color> | jewels in sack.|)
}



sp {apply*deliverLeaflet*remove-move
    (state <s> ^operator.name deliverLeaflet
           ^io.output-link <ol>)
    (<ol> ^{<cmd> << EAT GET MOVE DELIVER >>} <command>)
    (<command> ^status complete)
-->
    (<ol> ^<cmd> <command> -)
}   






#############################  AVOID BRICK  ####################################
# This operator will make the agent avoid the brick
# Propose*avoid*brick:
sp {propose*avoidBrick
   (state <s> ^io.input-link <il>)
   (<il> ^CREATURE <creature>)
   (<creature> ^SENSOR.VISUAL.ENTITY <entity>)
   (<entity> ^TYPE BRICK)
   (<entity> ^DISTANCE <distance> <= 61)      
-->
   (<s> ^operator <o> +)     
   (<o> ^name avoidBrick)
   (<o> ^parameter <distance>)}
      
     
# Apply*avoidBrick:
# If the move operator is selected, then generate an output command to it 
sp {apply*avoidBrick
   (state <s> ^operator <o>
              ^io <io>)
   (<o> ^name avoidBrick)
   (<o> ^parameter <distance>)              
   (<io> ^output-link <ol>)
-->
   (<ol> ^MOVE <command>)
   (<command> ^Vel  0)
   (<command> ^VelR (* 55 (/ <distance>)))
   (<command> ^VelL 0)}

#Remove the entity from memory
sp {apply*avoidBrick*remove*entity*memory
(state <s> ^operator <o>
           ^io.input-link <il>)
(<o> ^name avoidBrick)
(<o> ^entityName <entityName>)
(<il> ^CREATURE <creature>)
(<creature> ^MEMORY <memory>)
(<memory> ^COUNT <quantity>)
(<memory> ^ENTITY <entityInMemory>)           
(<entityInMemory> ^NAME <name> <entityName>)
-->
(<memory> ^ENTITY <entityInMemory> -)
(<memory> ^COUNT <quantity> -
          ^COUNT (- <quantity> 1))}             
                      
# Apply*avoidBrick*remove-move:
# If the avoidBrick operator is selected,
# and there is a completed move command on the output link,
# then remove that command.   
sp {apply*avoidBrick*remove-move
(state <s> ^operator.name avoidBrick
           ^io.output-link <out>)
(<out> ^{<cmd> << EAT GET MOVE DELIVER >>} <move>)
(<move> ^status complete)
-->
(<out> ^<cmd> <move> -)}  
            
##################  OPERATORS PREFERENCES AND IMPASSE SOLVE  ###################

#
# moveDeliverySpot preference rules
#

sp {deliver-higher-payment-leaflet*moveDeliverySpot*preferences
   (state <s> ^operator <o1> +
                        <o2> +)
   (<o1> ^name moveDeliverySpot
         ^id <ll-id-1>
         ^payment <ll-payment-1>)
   (<o2> ^name moveDeliverySpot
         ^id <ll-id-2> <> <ll-id-1>
         ^payment <ll-payment-2> <= <ll-payment-1>)
-->
   (<s> ^operator <o1> > <o2>)
   (write (crlf) | Selecting to go deliver leaflet | <ll-id-1> | (| <ll-payment-1> |) instead of | <ll-id-2> | (| <ll-payment-2> |)|)
}



sp {moveDeliverySpot*moveJewel*preference-1
   (state <s> ^operator <o1> +
                        <o2> +
              ^io.input-link.CREATURE.DELIVERY-SPOT <ds>)
   (<ds> ^distance <distance-ds>)
   (<o1> ^name moveDeliverySpot
         ^id <ll-id-1>
         ^payment <ll-payment-1>)
   (<o2> ^name moveJewel)
   (<o2> ^parameter.distance <distance-jewel> >= <distance-ds>)
-->
   (<s> ^operator <o1> > <o2>)
   (write (crlf) | Selecting to go deliver leaflet | <ll-id-1> | (| <ll-payment-1> |, distance | 
                   <distance-ds> |) instead of moveJewel (distance | <distance-jewel> |)|)
}


sp {moveDeliverySpot*moveJewel*preference-2
   (state <s> ^operator <o1> +
                        <o2> +
              ^io.input-link.CREATURE.DELIVERY-SPOT <ds>)
   (<ds> ^distance <distance-ds>)
   (<o1> ^name moveDeliverySpot
         ^id <ll-id-1>
         ^payment <ll-payment-1>)
   (<o2> ^name moveJewel)
   (<o2> ^parameter.distance <distance-jewel> < <distance-ds>)
-->
   (<s> ^operator <o1> < <o2>)
   (write (crlf) | Selecting to moveJewel (distance | <distance-jewel> |) instead of go deliver leaflet | <ll-id-1> | (| 
                 <ll-payment-1> |, distance | <distance-ds> |) |)
}




#
# deliverLeaflet preference rules.
#

sp {deliverLeaflet-higher-payment*preferences
   (state <s> ^operator <o1> +
                        <o2> +)
   (<o1> ^name deliverLeaflet
         ^id <ll-id-1>
         ^payment <ll-payment-1>)
   (<o2> ^name deliverLeaflet
         ^id <ll-id-2> <> <ll-id-1>
         ^payment <ll-payment-2> <= <ll-payment-1>)
-->
   (<s> ^operator <o1> > <o2>)
   (write (crlf) | Selecting to deliver leaflet | <ll-id-1> | (| <ll-payment-1> |) instead of | <ll-id-2> | (| <ll-payment-2> |)|)
}



#SEE AND PROCESS ENTITY

# Move Jewel or Move Food vs See Entity
sp {moveJewel*seeEntity*preferences
(state <s> ^operator <o> + 
                     <o2> +)
(<o> ^name << seeEntityWithMemoryCount seeEntityWithoutMemoryCount >>)
(<o2> ^name << moveJewel moveFood moveDeliverySpot >>)
-->
(<s> ^operator <o> > <o2>)} 

# See Entity With Memory vs Avoid Brick
sp {avoidBrick*seeEntityWithMemory*preferences
(state <s> ^operator <o> + 
                     <o2> +)
(<o> ^name avoidBrick)
(<o2> ^name << seeEntityWithMemoryCount seeEntityWithoutMemoryCount >>)
-->
(<s> ^operator <o> > <o2>)} 

# See Ententy Without Memory Preferences
sp {seeEntity*without*memory*preferences
(state <s> ^operator <o> +)
(<o> ^name << seeEntityWithMemoryCount seeEntityWithoutMemoryCount >>)
-->
(<s> ^operator <o> =)}


#JEWEL

# Move Jewel vs Get Jewel
sp {moveJewel*getJewel*preferences
(state <s> ^operator <o> + 
                     <o2> +)
(<o> ^name getJewel)
(<o2> ^name << moveJewel moveFood moveDeliverySpot >>)
-->
(<s> ^operator <o> > <o2>)} 

# Get Jewel vs Avoid Brick
sp {getJewel*avoidBrick*preferences
(state <s> ^operator <o> + 
                     <o2> +)
(<o> ^name getJewel)
(<o2> ^name avoidBrick)
-->
(<s> ^operator <o> > <o2>)} 

# Move Jewel vs Move Jewel Preferences
sp {moveJewel*moveJewel*less*distance
(state <s> ^attribute operator 
           ^impasse tie
           ^item <o> {<> <o> <o2>}
           ^superstate <ss>)
(<ss> ^io.input-link <il>)
(<il> ^CREATURE <creature>)                 
(<o> ^name moveJewel)
(<o2> ^name moveJewel)
(<o2> ^parameter.distance <distance2>)
(<o>  ^parameter.distance <distance> <= <distance2>)
-->
(<ss> ^operator <o> > <o2>)} 

# Get Jewel vs Get Jewel Preferences
sp {getJewel*getJewel*preferences
(state <s> ^attribute operator 
           ^impasse tie
           ^item <o> {<> <o> <o2>}
           ^superstate <ss>)        
(<o> ^name getJewel)
(<o2> ^name getJewel)
(<o2> ^parameter.distance <distance2>)
(<o>  ^parameter.distance <distance> <= <distance2>)
-->
(<ss> ^operator <o> > <o2>)} 

# FOOD

# Move Food vs Eat Food
sp {moveFood*eatFood*preferences
(state <s> ^operator <o> + 
                     <o2> +)
(<o> ^name eatFood)
(<o2> ^name << moveFood moveJewel moveDeliverySpot >>)
-->
(<s> ^operator <o> > <o2>)} 

# Eat Food vs Avoid Brick
sp {eatFood*avoidBrick*preferences
(state <s> ^operator <o> + 
                     <o2> +)
(<o> ^name eatFood)
(<o2> ^name avoidBrick)
-->
(<s> ^operator <o> > <o2>)} 

# Move Food vs Move Food Preferences
sp {moveFood*moveFood*preferences
(state <s> ^attribute operator 
           ^impasse tie
           ^item <o> {<> <o> <o2>}
           ^superstate <ss>)        
(<o> ^name moveFood)
(<o2> ^name moveFood)
(<o2> ^parameter.distance <distance2>)
(<o>  ^parameter.distance <distance> <= <distance2>)
-->
(<ss> ^operator <o> > <o2>)} 

# Eat Food vs Eat Food Preferences
sp {eatFood*eatFood*preferences
(state <s> ^attribute operator 
           ^impasse tie
           ^item <o> {<> <o> <o2>}
           ^superstate <ss>)        
(<o> ^name eatFood)
(<o2> ^name eatFood)
(<o2> ^parameter.distance <distance2>)
(<o>  ^parameter.distance <distance> <= <distance2>)
-->
(<ss> ^operator <o> > <o2>)} 

# FOOD vs JEWEL

# Move Food vs Move Jewel Preferences - Move Food Wins
sp {moveFood*moveJewel*preferences*moveFoodWins
(state <s> ^attribute operator 
           ^impasse tie
           ^item <o> {<> <o> <o2>}
           ^superstate <ss>)
(<ss> ^io.input-link <il>)
(<o> ^name moveFood)
(<o> ^parameterFuel <threshold>)
(<o2> ^name << moveJewel moveDeliverySpot >>)
(<il> ^CREATURE.SENSOR.FUEL <fuel>)
(<fuel> ^VALUE <value> <= <threshold>)        
-->
(<ss> ^operator <o> > <o2>)} 



# Move Food vs Move Jewel Preferences - Move Jewel Wins
sp {moveFood*moveJewel*preferences*moveJewelWins
(state <s> ^attribute operator 
           ^impasse tie
           ^item <o> {<> <o> <o2>}
           ^superstate <ss>)
(<ss> ^io.input-link <il>)
(<o> ^name moveFood)
(<o> ^parameterFuel <threshold>)
(<o2> ^name << moveJewel moveDeliverySpot >>)
(<il> ^CREATURE.SENSOR.FUEL <fuel>)
(<fuel> ^VALUE <value> > <threshold>)        
-->
(<ss> ^operator <o2> > <o>)} 


#BRICK  

# Avoid Brick vs Avoid Brick Preferences
sp {avoidBrick*avoidBrick*without*move*jewel*preferences
(state <s> ^attribute operator 
           ^impasse tie
           ^item <o> {<> <o> <o2>}
           ^item-count <itemCount>
           ^superstate <ss>)        
(<o> ^name avoidBrick)
(<o2> ^name avoidBrick)
(<o2> ^parameter <distance2>)
(<o>  ^parameter <distance> <= <distance2>)
-->
(<ss> ^operator <o> > <o2>)}

# Avoid Brick vs Move Jewel vs Move Food Preferences with element in memory 
sp {avoidBrick*moveJewel*moveFood*preferences
(state <s> ^attribute operator 
           ^impasse tie
           ^item <o> {<> <o> <o2>}
           ^item-count <itemCount> 2
           ^superstate <ss>)        
(<o> ^name avoidBrick)
(<o2> ^name << moveJewel moveFood >>)
(<o2> ^parameter <entity>)
(<entity> ^NAME <entityName>)
(<ss> ^io.input-link <il>)
(<il> ^CREATURE <creature>)
(<creature> ^MEMORY <memory>)
(<memory> ^ENTITY <entityInMemory>)
(<entityInMemory> ^NAME <entityName>)
-->
(<o> ^entityName <entityName>)
(<ss> ^operator <o> > <o2>)}

# WANDER

# Wander Preferences
sp {wander*preferences
(state <s> ^operator <o> +)
(<o> ^name wander)
-->
(<s> ^operator <o> <)}



sp {eatFood*getJewel*preferences*over*seeEntity
(state <s> ^operator <o1> + 
                     <o2> +)
(<o1> ^name << getJewel eatFood >>)
(<o2> ^name << seeEntityWithMemoryCount seeEntityWithoutMemoryCount >>)
-->
(<s> ^operator <o1> > <o2>)
}        